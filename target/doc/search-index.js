var searchIndex = JSON.parse('{\
"alesia":{"doc":"Alesia, a straight-forward game engine in rust","t":[0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,13,13,13,13,3,4,3,4,3,13,13,13,13,3,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,11,11,11,11,11,11,11,5,5,5,5,11,11,12,11,11,5,12,11,11,5,5,11,11,11,5,11,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,12,12,12],"n":["display","input","napi","utils","world","Display","begin","begin_s","borrow","borrow_mut","from","into","new","new_s","try_from","try_into","type_id","ATTACK","DEFEAT","MOVE","MutHealthA","MutHealthR","Order","VICTORY","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","0","0","0","0","1","1","1","1","2","2","3","DfuncType","alsBeginS_Display","alsBegin_Display","alsBindDamageFunc","alsBindInit","alsBindTurn","alsBlank_World","alsCreateStatic","alsDefAnim","alsFreeResourceSet","alsFreeStateListener","alsFreeUnitType","alsFreeWorld","alsIdList","alsLoadMap","alsMapFont","alsMapMusic","alsMapSound","alsMapTexture","alsMapTextureRegion","alsNewResourceSet","alsNewStateListener","alsNewUnitType","alsRegisterUnitType","alsSetUnitInfo","alsSpawnUnit","alsTilePermAt","alsVerifyUID","alsnFreeVec","alsnGetUnitHealth","alsnGetUnitX","alsnGetUnitY","alsnIsUnitFoe","alsnPushAttackOrder","alsnPushMoveOrder","alsnUnitRef","alsnVecAt","alsnVecLen","CInitHandle","CTurnHandle","ResourceSet","StateListener","_bind_rawinit","_bind_rawturn","_new_raw","bind_init","bind_turn","borrow","borrow","borrow_mut","borrow_mut","drop","from","from","get_default_font","get_default_texture","get_font","get_music","get_sound","get_texture","get_texture_region","into","into","is_texture_region","load_all","map_font","map_music","map_sound","map_texture","map_texture_region","new","new","notify_init","notify_turn","set_default_texture","try_from","try_from","try_into","try_into","type_id","type_id","Allowed","AttackDown","AttackLeft","AttackRight","AttackUp","CHandle","Damage","DamageFunc","Handle","Heal","Prohibited","Stand","StaticTex","TileType","Unit","UnitState","UnitType","WalkDown","WalkLeft","WalkRight","WalkUp","World","_guinfo","_stand_frame","allowed","bgm_id","bind_damage_func","blank","blank_o","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cam_wx","cam_wy","clone","clone_into","coff","create_static","def_anim","def_anim_muted","defeat_text","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_cpos","get_tile_size","get_tint","health","id_list","info","into","into","into","into","into","into","into","intro_text","is_tile_atrange","is_uid_valid","is_unit_player_controlled","load_world","map_size","map_title","name","nascent_state","new","order_pending","player","prep_draw","prep_draw","prep_tiledraw","register_unit_type","set_bgm","set_cpos","set_info","set_unit_state","show_map","spawn_unit","tile_at","tile_type_at","tint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","units","update","victory_text","wots","wpos","0","0"],"q":["alesia","","","","","alesia::display","","","","","","","","","","","","alesia::input","","","","","","","","","","","","","","","alesia::input::Order","","","","","","","","","","","alesia::napi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","alesia::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","alesia::world","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","alesia::world::DamageFunc",""],"d":["Creates a Window, initializes Raylib.","Handles User Input.","Exposes FFI-functions that are exported into dynamic …","Provides basic utilities like resource management","Manages Renderables, Game Objects, Isometric Tilemaps, and …","A plain struct with fields for width, height and title of …","Begin the draw-update loop.","Overload for <code>Display.begin</code>, uses default state listener, …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Constructor method. Returns Display struct with specified …","Constructor method. Returns display struct with specified …","","","","Order to make unit with id, attack from tile position.","Order to declare player defeat.","Order to move unit with id, to tile position.","Order to modify a unit’s health by incrementing a …","Order to modify a unit’s health relative to maximum …","An enum containing all possible orders followed by units.","Order to declare player victory.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Creates the display and begins the game. ResourceSet and …","Creates the display and begins the game. ResourceSet, …","","","","","","FFI for <code>UnitType.def_anim</code>. Tuples have been expanded into …","Free a leaked reference","Free a leaked reference","Free a leaked reference","Free a leaked reference","","","","","","","","","","","","","","","Checks if the specified unit ID is valid.","","Getter for the health of the unit with specified ID. …","Getter for the x position of the unit with specified ID.","Getter for the x position of the unit with specified ID.","Returns true if the unit with given id is an enemy unit.","Push an attack Order. See enum Order. ","Push a move order. See enum Order.","Get an immutable (i.e, <code>readonly</code>) reference to the unit …","Return byte value at index <code>elm</code> in <code>Vec&lt;u8&gt;</code>","Return length of byte vector.","Type alias for nullable C ABI function pointer for <code>on_init</code> …","Type alias for nullable C ABI function pointer for <code>on_turn</code> …","Struct for storing, and managing resources such as …","Plain struct to store callbacks for the following events:","FFI Internal","FFI Internal","Constructor method for ‘raw’ listeners (i.e, C ABI …","Bind a function for callback when display is initialized.","Bind a function for callback when player turn ends.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get the default font. Used for UI.","Get the default texture.","Return the font (if it exists) with the specified id.","Return the sound (if it exists) with the specified id.","Return the sound (if it exists) with the specified id.","Return the texture (if it exists) with the specified id.","Return the texture region (if it exists) with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the given id belongs to a texture region.","Load all resources from the set.","Map a font to an internal unsigned byte identifier. The …","Map a music track to an internal unsigned byte identifier …","Map a sound to an internal unsigned byte identifier …","Map a texture to an internal unsigned byte identifier. …","Map a region of a texture to an internal unsigned byte …","Default constructor.","Constructor method.","Notify this listener that display initialization has been …","Notify this listener that turn has ended, i.e, transition …","Set the default texture of the resource set. The default …","","","","","","","Tile type for tiles which units can move onto.","Unit attacks tile below it","Unit attacks tile west of it","Unit attacks tile east of it.","Unit attacks tile above it.","","Tile type for tiles which damage units.","Pointer to damage calculating function; *<code>atk</code> - the unit …","","Tile type for tiles which heal units.","Tile type for tiles which units cannot move onto.","No change in unit position.","Plain struct to specify the texture, world co-ordinates, …","","Plain struct to represent a unit in the world.","An enum of all possible states of a unit. Every UnitState …","A struct to specify a Unit-Type. Contains details common …","Unit increments y-co-ordinate steadily. ","Unit increments x-co-ordinate steadily.","Unit decrements x-co-ordinate steadily.","Unit decrements y-co-ordinate steadily.","Plain struct to contain sprites, tilemap, gameobjects etc.","","","","The internal identifier of the music currently playing in …","Set the damage calculation function.","Create an empty world struct. Tile size is 96x48.","Create an empty world with specified origin and tile size *…","","","","","","","","","","","","","","","Camera abscissa in world-co-ordinates.","Camera ordinate in world-co-ordinates.","","","Camera offset","Add a static image/texture of given size to the world at …","Define an animation for this unit with an accompanying …","Define an animation for this unit without an accompanying …","Get the text to be displayed when player loses.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get camera position in screen co-ordinates","Get size of tiles in tileset as a tuple of (width, height)","Get the tint colour for the unit.","The health (HP) of the unit.","Returns a vector containing units of all alive units.","Info-string to be displayed. for this unit type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the text to be displayed before starting gameplay.","Returns true if two tile positions are within a given …","Check if the there exists a unit with the specified id.","Returns true if unit of specified id can be controlled by …","Load tile map data from the specified file into the world","Returns the size of the tilemap as a tuple (width, height)","Get the title of the map loaded.","The display name of units belonging to this type.","Returns true if the unit has changed state within the …","Constructor method. Create a new unit-type with the …","Returns true if given order has not yet been completed, …","Flag to mark whether the unit belongs to player or enemy.","Return the texture id, and on-screen position of the …","Prepare the unit for rendering.","Return position of tile texture in tileset and tile …","Register a unit type into the world. Only registered types …","Set the music id for the background music.","Set camera position in world co-ordinates","Set the info string of this unit type.","Mutator for unit state. Does nothing if unit id does not …","Returns true if tilemap has been loaded with tile data.","Spawn a unit of the given type with specified tint, and …","Get the world position of the virtual tile at given screen …","Returns true if the tile specified allows movement. ","The tint to be applied to the sprite (hex colour).","","","","","","","","","","","","","","","","","","","","","","","Map containing all alive units.","Update function of the Unit.","Get the text to be displayed when player wins.","Convert world co-ordinates into screen co-ordinates for …","The position of the sprite in the world.","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,3,4,5,6,3,4,5,6,3,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,8,7,8,7,8,8,7,8,8,8,8,8,8,8,8,7,8,0,8,8,8,8,8,8,7,7,7,8,8,7,8,7,8,7,9,10,10,10,10,11,9,0,11,9,9,10,0,0,0,0,0,10,10,10,10,0,0,12,9,13,13,13,13,11,13,14,9,15,10,12,11,13,14,9,15,10,12,13,13,9,9,13,0,14,14,13,13,14,13,9,15,10,12,11,13,14,9,15,10,12,13,13,12,12,0,14,11,13,14,9,15,10,12,13,0,0,0,0,13,13,14,12,14,0,12,15,12,0,0,13,13,14,0,13,0,0,0,12,9,11,13,14,9,15,10,12,11,13,14,9,15,10,12,11,13,14,9,15,10,12,13,12,13,0,12,16,17],"f":[null,null,null,null,null,null,[[["resourceset",3],["world",3],["statelistener",3]]],[[["resourceset",3],["world",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["i32",0],["i32",0],["u32",0],["bool",0],["str",0],["color",3],["f32",0]],["display",3]],[[["i32",0],["i32",0],["str",0]],["display",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",0],["i32",0]]],[[["i32",0],["i32",0],["bool",0],["u32",0],["f32",0]]],[[["dfunctype",6]]],[[["cinithandle",6]]],[[["cturnhandle",6]]],[[]],[[["u8",0],["i32",0],["i32",0]]],[[["u32",0],["u32",0],["u8",0],["u32",0],["u32",0],["f32",0],["bool",0]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],[[["u8",0],["u8",0],["f32",0],["f32",0],["f32",0],["f32",0]]],[[]],[[]],[[["u8",0],["f32",0],["f32",0],["u8",0],["u8",0],["f32",0]]],[[["u8",0]]],[[]],[[["u8",0],["i32",0],["i32",0],["i32",0],["bool",0]],["u8",0]],[[["i32",0],["i32",0]],["bool",0]],[[["u8",0]],["bool",0]],[[]],[[["u8",0]],["f32",0]],[[],["f32",0]],[[],["f32",0]],[[],["bool",0]],[[["u8",0],["u8",0],["i32",0],["i32",0]]],[[["u8",0],["i32",0],["i32",0]]],[[["u8",0]]],[[["usize",0]],["u8",0]],[[],["usize",0]],null,null,null,null,[[["",0],["cinithandle",6]]],[[["",0],["cturnhandle",6]]],[[],["statelistener",3]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[]],[[]],[[["",0]],["font",3]],[[["",0]],["texture2d",3]],[[["",0],["u8",0]],["font",3]],[[["",0],["u8",0]],["option",4,[["music",3]]]],[[["",0],["u8",0]],["sound",3]],[[["",0],["u8",0]],["texture2d",3]],[[["",0],["u8",0]]],[[]],[[]],[[["",0],["u8",0]],["bool",0]],[[["resourceset",3],["raylibhandle",3],["raylibthread",3]]],[[["",0],["u8",0],["str",0]]],[[["",0],["u8",0],["str",0]]],[[["",0],["u8",0],["str",0]]],[[["",0],["u8",0],["str",0]]],[[["",0],["u8",0],["u8",0],["f32",0],["f32",0],["f32",0],["f32",0]]],[[],["resourceset",3]],[[],["statelistener",3]],[[["",0]]],[[["",0],["world",3],["vec",3]]],[[["",0],["u8",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["world",3],["unit",3]]],[[["",0],["world",3],["i32",0],["i32",0]]],[[["",0]],["bool",0]],null,[[["",0]]],[[],["world",3]],[[["i32",0],["i32",0],["i32",0],["i32",0]],["world",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["tiletype",4]],[[["",0],["",0]]],null,[[["world",3],["u8",0]]],[[["",0],["u8",0],["f32",0],["bool",0],["u8",0],["bool",0]]],[[["",0],["u8",0],["f32",0],["bool",0]]],[[["",0]],["str",0]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]],["color",3]],null,[[["world",3]],["vec",3,[["u8",0]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["str",0]],[[["u8",0]],["bool",0]],[[["world",3],["u8",0]],["bool",0]],[[["world",3],["u8",0]],["bool",0]],[[["world",3],["str",0]],["bool",0]],[[["",0]]],[[["",0]],["str",0]],null,[[["",0]],["bool",0]],[[["u8",0],["string",3],["f32",0],["f32",0],["u8",0],["u8",0],["f32",0]],["unittype",3]],[[["order",4],["world",3],["option",4]],["bool",0]],null,[[["",0],["world",3]]],[[["",0],["world",3]]],[[["world",3],["i32",0],["i32",0],["i32",0]]],[[["world",3],["unittype",3],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["f32",0],["f32",0]]],[[["",0],["string",3]]],[[["world",3],["u8",0],["unitstate",4]]],[[["",0]],["bool",0]],[[["world",3],["u8",0],["i32",0],["bool",0]],["u8",0]],[[["world",3],["f32",0],["f32",0]]],[[["world",3],["i32",0],["i32",0]],["tiletype",4]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0],["hashmap",3],["f32",0]]],[[["",0]],["str",0]],[[["world",3],["i32",0],["i32",0]]],null,null,null],"p":[[3,"Display"],[4,"Order"],[13,"MOVE"],[13,"ATTACK"],[13,"MutHealthR"],[13,"MutHealthA"],[3,"StateListener"],[3,"ResourceSet"],[4,"TileType"],[4,"UnitState"],[4,"DamageFunc"],[3,"Unit"],[3,"World"],[3,"UnitType"],[3,"StaticTex"],[13,"Handle"],[13,"CHandle"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};