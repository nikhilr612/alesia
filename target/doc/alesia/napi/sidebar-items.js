initSidebarItems({"fn":[["alsBeginS_Display","Creates the display and begins the game. ResourceSet and World are deallocated when this method returns."],["alsBegin_Display","Creates the display and begins the game. ResourceSet, World, and StateListener are deallocated when this method returns."],["alsBindInit",""],["alsBindTurn",""],["alsBlank_World",""],["alsCreateStatic",""],["alsDefAnim","FFI for `UnitType.def_anim`. Tuples have been expanded into individual arguments."],["alsFreeResourceSet","Free a leaked reference"],["alsFreeStateListener","Free a leaked reference"],["alsFreeUnitType","Free a leaked reference"],["alsFreeWorld","Free a leaked reference"],["alsIdList",""],["alsLoadMap",""],["alsMapFont",""],["alsMapMusic",""],["alsMapSound",""],["alsMapTexture",""],["alsNewResourceSet",""],["alsNewStateListener",""],["alsNewUnitType",""],["alsRegisterUnitType",""],["alsSpawnUnit",""],["alsTilePermAt",""],["alsVerifyUID","Checks if the specified unit ID is valid."],["alsnFreeVec",""],["alsnGetUnitHealth","Getter for the health of the unit with specified ID. Returns -1.0 on NULL pointer or invalid ID."],["alsnGetUnitX","Getter for the x position of the unit with specified ID."],["alsnGetUnitY","Getter for the x position of the unit with specified ID."],["alsnIsUnitFoe","Returns true if the unit with given id is an enemy unit."],["alsnPushAttackOrder","Push an attack Order. See enum [Order]. "],["alsnPushMoveOrder","Push a move order. See enum [Order]."],["alsnUnitRef","Get an immutable (i.e, `readonly`) reference to the unit with the specified id."],["alsnVecAt","Return byte value at index `elm` in `Vec<u8>`"],["alsnVecLen","Return length of byte vector."]]});